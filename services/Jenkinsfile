node {
    def app

    stage('Clone repository') {
        checkout scm
    }


    stage('Package jar file with Maven') {
         dir('services') {
            withMaven(
                // Maven installation declared in the Jenkins "Global Tool Configuration"
                maven: 'M3') {
                // Run the maven build
                sh "mvn clean install"
            } 
         }
    }

    stage('Build image with Docker') {
        dir('services') {
            app = docker.build("restful-web-services:${env.BUILD_NUMBER}")
        }
    }

   stage('Push image to container registry') {
        docker.withRegistry('https://group1registry.azurecr.io', 'acr-credentials') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }
    }

    stage("Deploy to UAT?") {
        dir('services/kubernetes') {
            def namespace = input(
                id: 'namespace', message: 'Deploy to UAT?', parameters: [
                [$class: 'TextParameterDefinition', defaultValue: 'uat', description: 'Environment', name: 'env']
            ])

            def imagetag="${env.BUILD_NUMBER}"
            deploy(namespace,imagetag)    
        }
    }

    stage("Verify UAT") {
        dir('services/kubernetes') {
            def namespace = "uat"
            def service = "restful-web-services"
            def serviceIP = "";       

            echo "Waiting for Service to get an IP"
            sleep 10 // give the service some time to start
            
            while(serviceIP == "") {
                serviceIP = sh(script: "kubectl --kubeconfig /var/lib/jenkins/config get service $service --namespace $namespace --output jsonpath='{.status.loadBalancer.ingress[0].ip}'", returnStdout: true)
                if(serviceIP == "" || serviceIP == null) {
                    sleep 10 // give the service some time to get an IP
                }
            }

            echo "Service got an IP: $serviceIP . Will wait a bit to allow the pods to start."
            sleep 30 // give the pods some time to start
            
            runIntegrationTests(serviceIP)
        }
    }

    stage("Deploy to Production?") {
        dir('services/kubernetes') {
            def namespace = input(
                id: 'namespace', message: 'Deploy to Production?', parameters: [
                [$class: 'TextParameterDefinition', defaultValue: 'prod', description: 'Environment', name: 'env']
            ])

            def imagetag="${env.BUILD_NUMBER}"
            deploy(namespace,imagetag)    
        }
    }
}

def deploy(namespace,imagetag) {
    // Create a copy for this environment
    sh "cp deployment.yaml deployment.${namespace}.yaml"
    sh "cp namespace.yaml namespace.${namespace}.yaml"
    sh "cp service.yaml service.${namespace}.yaml"
    sh "cp redis-deployment.yaml redis-deployment.${namespace}.yaml"
    sh "cp redis-service.yaml redis-service.${namespace}.yaml"

    // String replace namespaces
    sh "sed -i.bak s/XX_NAMESPACE_XX/$namespace/g deployment.${namespace}.yaml"
    sh "sed -i.bak s/XX_NAMESPACE_XX/$namespace/g namespace.${namespace}.yaml"
    sh "sed -i.bak s/XX_NAMESPACE_XX/$namespace/g service.${namespace}.yaml"               
    sh "sed -i.bak s/XX_NAMESPACE_XX/$namespace/g redis-deployment.${namespace}.yaml"               
    sh "sed -i.bak s/XX_NAMESPACE_XX/$namespace/g redis-service.${namespace}.yaml"               

    // Create namespace
    kubectl(namespace, "apply -f namespace.${namespace}.yaml")

    // String replace the image name in the deployment and create the deployment
    sh "sed -i.bak s/XX_IMAGETAG_XX/$imagetag/g deployment.${namespace}.yaml"
    kubectl(namespace, "apply -f deployment.${namespace}.yaml")
        
    // Create service
    kubectl(namespace, "apply -f service.${namespace}.yaml")  

    // Create redis deployment
    kubectl(namespace, "apply -f redis-deployment.${namespace}.yaml")  

    // Create redis service
    kubectl(namespace, "apply -f redis-service.${namespace}.yaml")  
}

def kubectl(namespace,cmd) {
    return sh(script: "kubectl --kubeconfig /var/lib/jenkins/config --namespace=${namespace} ${cmd}", returnStdout: true)
}

def runIntegrationTests(frontendIp) {
    echo "Running integration tests to service $frontendIp"
    def resp = sh(script: "curl -sL -w '%{http_code}' -o /dev/null  ${frontendIp.trim()}/health 2>&1", returnStdout: true).trim()
    if (resp != "200") {
        error "Could not reach new service at $frontendIp"
    }
    else {
        echo "Service OK."
    }
}
